{% sql %}
    DECLARE @PreviousSunday DATETIME = CONVERT(datetime, '{{ 'Now' | DateAdd:-6 | SundayDate }}');

WITH WeeklyAttendance AS (
        SELECT mv.MetricValueDateTime AS [DateTime],
            mvpc.EntityId AS CampusId,
            c.Name AS CampusName,
            SUM(YValue) AS Total
        FROM [MetricValue] AS mv
        LEFT JOIN [MetricValuePartition] AS mvps ON mv.Id = mvps.MetricValueId
        INNER JOIN [MetricPartition] AS mps ON mvps.MetricPartitionId = mps.Id
            AND mps.EntityTypeId = 54
        LEFT JOIN [Schedule] AS s ON mvps.EntityId = s.Id
        LEFT JOIN [MetricValuePartition] AS mvpc ON mv.Id = mvpc.MetricValueId
        INNER JOIN [MetricPartition] AS mpc ON mvpc.MetricPartitionId = mpc.Id
            AND mpc.EntityTypeId = 67
        INNER JOIN [Campus] AS C ON mvpc.EntityId = c.Id
        INNER JOIN AnalyticsSourceDate asd ON CONVERT(DATE, mv.MetricValueDateTime, 101) = asd.DATE
        WHERE mv.MetricId IN (6, 7, 8, 10, 16, 17, 18)
            AND (s.CategoryId IN (50, 326))
            AND mv.MetricValueDateTime NOT IN ('2019-12-22', '2021-12-26')
            AND asd.EasterWeekIndicator != 1
            AND asd.DATE NOT IN ('2019-12-22', '2021-12-26')
            AND asd.DATE BETWEEN DATEADD(year, - 2, @PreviousSunday)
                AND @PreviousSunday
        GROUP BY mvpc.EntityId,
            c.Name,
            mv.MetricValueDateTime
        UNION ALL
        SELECT mv.MetricValueDateTime as [DateTime],
            0 AS CampusId,
            'Total' AS CampusName,
            SUM(YValue) AS Total
        FROM [MetricValue] AS mv
        LEFT JOIN [MetricValuePartition] AS mvps ON mv.Id = mvps.MetricValueId
        INNER JOIN [MetricPartition] AS mps ON mvps.MetricPartitionId = mps.Id
            AND mps.EntityTypeId = 54
        LEFT JOIN [Schedule] AS s ON mvps.EntityId = s.Id
        Inner join AnalyticsSourceDate asd on CONVERT(DATE, mv.MetricValueDateTime, 101) = asd.DATE
        WHERE mv.MetricId IN (6, 7, 8, 10, 16, 17, 18)
            AND (s.CategoryId IN (50, 326))
            AND mv.MetricValueDateTime NOT IN ('2019-12-22', '2021-12-26')
            AND asd.EasterWeekIndicator != 1
            AND asd.DATE NOT IN ('2019-12-22', '2021-12-26')
            AND asd.DATE BETWEEN DATEADD(year, - 2, @PreviousSunday)
                AND @PreviousSunday
        GROUP BY mv.MetricValueDateTime
        )

SELECT * FROM (
SELECT a.[DateTime],
    a.CampusId,
    a.CampusName,
    a.Total,
    AVG(b.Total) AS [ThirteenAverage]
FROM WeeklyAttendance a
LEFT JOIN WeeklyAttendance b ON a.CampusId = b.CampusId
    AND b.[DateTime] BETWEEN DATEADD(week, - 12, a.[DateTime])
        AND a.[DateTime]
GROUP BY a.[DateTime],
    a.CampusId,
    a.CampusName,
    a.Total
) AS Attendance
WHERE Attendance.[DateTime] BETWEEN DATEADD(year, - 1, @PreviousSunday)
        AND @PreviousSunday
ORDER BY Attendance.CampusId,
    Attendance.[DateTime]
{% endsql %}
{%- assign dates = results | Distinct:'DateTime' -%}
{% assign campuses = results | GroupBy:'CampusName' %}

<div class="chart-container" style="position:relative; width:100%; height:300px; margin-bottom:50px;">
     <h5>13 week Average over Time</h5>
     <canvas id="myChart2"></canvas>
</div>

<script>
    var ctx = document.getElementById("myChart2").getContext('2d');
    var config = {
        type: 'line',
        data: {
            labels: [{%-for date in dates -%}"{{date.DateTime | Date:'MM/dd/yy' }}"{%- unless forloop.last-%}, {%-endunless-%}{%-endfor-%}],
            datasets: [
              {%- for campus in campuses -%}
              {%- assign parts = campus | PropertyToKeyValue -%}
                {
                    label: '{{parts.Key}}',
                {%- capture color -%}{%- cycle 'bgc': '#FFC905','#4054D9','#8DC63F','#652D90','#00ADEE','#F15A29','#FF6675','#FFB1BB' -%}{%- endcapture -%}
                        borderColor: "{{color | UnescapeDataString}}",
                        backgroundColor: "{{color | UnescapeDataString}}",
                        borderWidth: 1,
                        fill:false,
                        data: [
                            {%- for avg in parts.Value -%}{x:'{{avg.DateTime | Date:'MM/dd/yy' }}',y:{{ avg.ThirteenAverage | Format:'###0'}} }{%- unless forloop.last -%}, {%- endunless -%}{%- endfor -%} ] }{% unless forloop.last %},{%- endunless -%}{%- endfor %} ]
              },
                options: {
                responsive: true,
                maintainAspectRatio: false,
                animation: {
                    duration: 2500,
                },
                plugins: {
                    tooltip: {
                        mode: 'index'
                    }
                },
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit:'month',
                            displayFormats: {
                                month: 'MM/YY'
                            },
                            tooltipFormat: 'MM/DD/YY'
                        }
                    },
                    y: {
                        beginAtZero: true
                    }
                }
            }}
var Line2 = new Chart(ctx, config);
</script>
